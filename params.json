{"name":"Develop-specification-documents","tagline":"","body":"#后端开发规范\r\n\r\n\r\n##目录结构\r\n\r\n1. 所有路径一律为相对路径, 且由框架自带函数或变量生成\r\n\r\n2. 用户上传的文件, 网站的各种css, js, font/iconfont, 图片等公共资源放在框架中public区域下\r\n\r\n3. 禁止改动框架核心目录结构以及变更名字\r\n\r\n##代码\r\n\r\n###编码\r\n\r\n1. PHP代码必须只使用不带BOM的UTF-8\r\n\r\n###注释 \r\n\r\n1. 单行注释：在语句结尾用双反斜杠`//`注释 \r\n\r\n2. 多行注释：多行注释以`/*`或`/**`符号开头，以`*/ `符号作为注释结束符\r\n\r\n3. `if`, `else`语句注释写在`{`之后\r\n\r\n4. 方法注释写在方法之前, 遵守`PHPDOC`标准\r\n\r\n5. 属性注释类同方法注释\r\n\r\n6. 类注释类同方法注释\r\n\r\n\r\n###命名规则\r\n\r\n1. 统一使用Camel命名法和下划线命名(除类名首字母大写)\r\n\r\n2. 采用英文单词或其组合，便于记忆和阅读，切忌使用汉语拼音来命名\r\n\r\n3. 变量名使用全名, 不可使用单字母(除循环迭代变量)\r\n\r\n4. 常量名全部使用大写字母和下滑线组成,常量的名称中不允许出现小写字母，可使用分隔符作为下划线\r\n\r\n###书写规则\r\n1. 文件 \r\n\r\n\t- 所有的PHP文件必须使用`LF`作为行结束符, 大多数IDE自动转换\r\n\t\r\n\t- 所有PHP文件必须以一个空行结束\r\n\t\r\n\t- 纯PHP代码的文件关闭标签`?>`必须省略 \r\n\r\n2. 行\r\n\t- 行长度不可有硬限制\r\n\t\r\n\t- 行实际长度不应超过80个字符, 较长的行应当被拆分成多个不超过80个字符的后续行\r\n\t\r\n\t- 空行可以用来改善可读性和区分相关的代码块\r\n\t\r\n\t- 一行不应多于一个语句\r\n3. 控制结构 \r\n\r\n\t- 控制结构关键词之后必须有一个空格 \r\n\r\n\t- 左括号之后不可有空格 \r\n\t\r\n\t- 右括号之前不可有空格 \r\n\r\n\t- 在右括号和左花括号之间必须有一个空格 \r\n\r\n\t- 代码主体必须有一次缩进 \r\n\t\r\n\t- 右花括号必须主体的下一行\r\n\r\n\t- 每个结构的主体必须被括在花括号里\r\n\t\r\n\t- 缩进使用四个`space`(软tab) \r\n\r\n4. 运算符\r\n\r\n\t- 每个运算符与两边参与运算的值或表达式中间要有一个空格\r\n\r\n5. 引号\r\n\r\n\t- 没有变量的场合禁止使用双引号, 优先使用单引号\r\n\t\r\n6. 关键词\r\n\t\r\n\t- PHP常量true, false和null必须使用小写\r\n\t\r\n\t- 禁止在变量命名使用关键字\r\n\r\n\r\n##数据库\r\n\r\n1. 兼顾性能的同时尽量遵守范式\r\n\r\n2. 记录禁止硬删除, 统一使用软删除\r\n\r\n3. 预留访问量统计表(访问量精确到每个页面)\r\n\r\n4. 原则上每张表须有一个主键\r\n\r\n\r\n##合作开发\r\n\r\n1. 开发使用git作为版本管理器, 托管平台可使用[Github](https://github.com \"https://github.com\")或[Oschina](http://git.oschina.net/ \"http://git.oschina.net/\")\r\n\r\n2. 项目开始前需初始化`.gitignore`文件, 忽略包括但不限于如`.idea/`, `*/config.php`, `public/uploads/*`, `.DS_store`等文件\r\n\r\n3. 每次commit需附带更改内容注释\r\n\r\n4. 项目出现冲突需解决冲突后才能提交, 禁止强行push\r\n\r\n\r\n##接口规范\r\n1. 需要有接口文档\r\n\r\n2. 接口文档需有`请求接口`, `请求数据`, `返回数据`, 对每条数据的注释说明\r\n\r\n3. 规定状态码\r\n\r\n4. 返回数据统一按照:\r\n\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t\"data\":\"\",//数据区域\r\n\t\t\t\t\t\t\"info\":\"\",//状态信息\r\n\t\t\t\t\t\t\"status\":\"\"//返回状态码\r\n\t\t\t\t\t] \r\n\r\n##部署\r\n\r\n1. 数据库账号密码禁止上传代码托管平台\r\n\r\n##开发文档\r\n\r\n1. 需要有开发文档和数据字典\r\n##其他\r\n\r\n1. 版权声明\r\n\r\n2. 开源协议\r\n\r\n3. 广告位 \r\n\r\n\r\n\r\n\r\n#################################\r\n#Author By Excelsior\r\n#### 命名\r\n------------------------------------------------------------------------------\r\n - **函数**：函数命名都应该采用**驼峰法**，多个单词的第一个单词小写，其余单词只需首字母大写，通常来说函数的名字可以长一些，应该做到  **见名知意**  \r\n\r\n\t - **公用函数**\r\n     - **私有函数**：在函数名前添加一个   **_**  下划线\r\n```   PHP\r\n\tpublic function userInfoUpdate() { /* Do Something*/ }\r\n\tprivate function _formatAjaxData() { /* Do Something*/ }\r\n\r\n\t// 如添加一篇文章的函数\r\n\tpublic function add () { /* 这样的函数名不应出现 */}\r\n\t// 最好改为\r\n\tpublic function addArtticle() { /**/ }\r\n```\r\n\r\n- **变量名**：统一采用**小写字母**和**下划线**的方式\r\n\t- 类中的私有变量应在变量名前加**下划线**\r\n\t- 一般变量中不应出现数字(网上有些例子，单词To写成2，这是不规范的)\r\n\t- 常量采用**大写字母**加**下划线**的方式，可以出现**数字**\r\n\t- 通常session变量命名以 **S_** 作为开头\r\n\t\t\r\n```   PHP\r\n\t$user_info = [];\r\n\tclass Demo {\r\n\t\tpublic $user_name;\r\n\t\tprotected $_user_age;\r\n\t\tprivate $_user_pass;\r\n\t}\r\n\t\r\n\tconst USER_TEL = 110;\r\n\tdefine('USER_TEL', 110);\r\n\t\r\n\t$_SESSION['S_user_info'];\r\n```\r\n\r\n---------------------------------------------------------------\r\n#### 代码块相关\r\n\r\n- **字符串**:  PHP中使用 单引号和双引号的使用是有区别的。字符串中不包含变量时，使用**单引号**，包含变量时，使用**双引号**，且使用 **花括号** 包起来。原生  **SQL** 语句必须使用双引号。\r\n```   PHP\r\n\t$str = '枪毙5分钟';\r\n\t\r\n\t$number = 10;\r\n\t$str = '枪毙{$number}分钟'；\r\n\t\r\n\t// SQL语句\r\n\t$select_sql = \"SELECT * FROM user WHERE `user_age` < '$number'\";\r\n```\r\n\r\n- **for循环**: 循环变量如果是小循环(通常指循环10次以下)， 可直接使用 $i ,  $j, 如果超过10次以上，则应该使用有意义的变量名。\r\n```   PHP\r\n\tfor($i = 0; $i < 10; $i++){\r\n\t\t\r\n\t}\r\n\t\r\n\tfor($userCount = 0; $userCount < 20; $userCount++){\r\n\t\t\r\n\t}\r\n```\r\n\r\n- **forEach循环**: 键名和键值必须使用有意义的变量名\r\n```   PHP\r\n\t$users = [\r\n\t\t'王洋辉' => [\r\n\t\t\t'age' => 20,\r\n\t\t\t'gender' => 'male'\r\n\t\t],\r\n\t\t'隆宗益' => [\r\n\t\t\t'age' => 20,\r\n\t\t\t'gender' => 'male'\r\n\t\t]\r\n\t];\r\n\tforeach($users as $userName => $userInfo){\r\n\t\techo $userInfo['age'];\r\n\t}\r\n```\r\n- **switch**: **PHP**的switch中的 **case** 是 **==** 相等比较，**JS**中是 **===** 全等比较，每个case要空四格，每个case必须有**break**，也空四格，每个switch必须有**default**\r\n```   PHP\r\n\t$users = [\r\n\t\t'王洋辉' => [\r\n\t\t\t'age' => 20,\r\n\t\t\t'gender' => 'male'\r\n\t\t],\r\n\t\t'隆宗益' => [\r\n\t\t\t'age' => 20,\r\n\t\t\t'gender' => 'male'\r\n\t\t]\r\n\t];\r\n\tswitch($userInfo['gender']) {\r\n\t\tcase 'male':\r\n\t\t\t/* balabalabala */\r\n\t\t\tbreak;\r\n\t\tcase 'female':\r\n\t\t\t/* balabalabala */\r\n\t\t\tbreak;\r\n\t\tdefault: \r\n\t\t\t/* 这是人妖咯 */\r\n\t\t\tbreak;\r\n\t}\r\n```\r\n- **if**/**elesif**:  使用 **if** / **elseif** 的控制语句的控制语句必须包在花括号内, 且条件语句的圆括号前后都必须有一个空格。\r\n\t```   PHP\r\n\tif ($user_name != $_POST['user_name']) \r\n\t\t echo '敢这样写的拖出去枪毙5分钟';\r\n\t```\r\n\t- 在圆括号里的条件语句，操作符必须用空格分开，鼓励使用多重圆括号以提高在复杂的条件中划分逻辑组合。\t\r\n\t```   PHP\r\n\tif ($user_name != $_POST['user_name']) {\r\n\t\t/** balabalabalabala **/\r\n\t}\r\n\t\r\n\t// 使用多重括号\r\n\tif (($total_number - $user_number) / $total_number) {\r\n\t\t/* balabalabalabala */\r\n\t}\r\n\t```\r\n\r\n\t- **elseif** 的格式规范如下\r\n\t```   PHP\r\n\t\tif ($number != 2) {\r\n\t\t\t/** balabalabalabala **/\r\n\t\t} elseif ($number != 3) {\r\n\t\t\r\n\t\t} elseif ($number != 4) {\r\n\t\r\n\t\t} else {\r\n\t\t\t\r\n\t\t}\r\n\t```\r\n\r\n----------------------\r\n####ThinkPHP开发规范\r\n- **目录结构**\r\n\t![Alt text](./QQ20150721-1@2x.png)\r\n\r\n\r\n- **各种细节**\r\n\t\r\n\t- 使用layout布局，页面头尾分离---[模板布局](http://document.thinkphp.cn/manual_3_2.html#template_layout)\r\n\r\n\t- 在html页面中的连接\r\n ```   Html\r\n\t <!-- 使用系统常量或者使用U函数 -->\r\n\t<a href=\"__CONTROLLER__/addArticle\"></a>\r\n\t\r\n\t<!-- 指向Article下的addArticle方法，虽然是正确地，但不允许 -->\r\n\t<a href=\"article/addArticle\"></a>\r\n```\r\n\t\r\n\t- 文件上传的配置\r\n\t\t 文件上传的配置应该写在Common/Confo/conf.php里\r\n\t```  PHP\r\n\t /** conf.php  **/\r\n\t return array(\r\n\t    // 上传的基本配置\r\n       'uploadConfig' => array(\r\n           'maxSize' => 0,\r\n           'rootPath' => './Public/',\r\n           'exts' => '',\r\n           'autoSub' => false\r\n       ),\r\n\t);\r\n\t```\r\n\t\t然后在具体的位置通过  **C函数**  读取出来，并补充具体的参数\r\n\t```  PHP\r\n\t /** ArticleController.class.php  **/\r\n\t\t\r\n\t\tpublic function postArticle() {\r\n\t\t\t$article_img = $_FILES['img'];\r\n\t\t\t\r\n\t\t\t// 基本配置\r\n\t\t\t$upload_config = C('uploadConfig');\r\n\t\t\t\r\n\t\t\t// 上传的具体配置\r\n\t\t\t$upload_config['savePath'] = 'upload/admin';\r\n\t\t\t/** balalala **/\r\n\t\t}\r\n\t\r\n\t```\r\n\t- 对于表单字段要使用  **I函数**  接收，并用  **trim()**  对其过滤\r\n\t``` PHP\r\n\t\t\t/*\r\n\t\t\t * I 函数\r\n\t\t\t * 参数一：接收的数据\r\n\t\t\t * 参数二：默认返回值\r\n\t\t\t * 参数三：过滤方式(默认方法为 htmlspecialchars)\r\n\t\t\t * 第三个参数的方法还有很多，自行谷歌之\r\n\t\t\t */\r\n\t\t\tpublic function postArticle() {\r\n\t\t\t\t$article_content = I('post.article_content', '', 'strip_tags');\r\n\t\t\t\t$tel = I('post.tel', 0, 'intval');  // 纯数字数据使用intval过滤 \r\n\t\t\t}\r\n\t```\r\n\r\n\t- 关于Ajax请求的返回格式\r\n\t``` PHP\r\n\t\t\t\r\n\t\t\tpublic function ajaxReturn($) {\r\n\t\t\t\treturn $this->ajaxReturn([\r\n\t\t\t\t\t'status' => 200 ， // HTTP状态码\r\n\t\t\t\t\t'info' => '用户名或密码错误!', // 提示信息\r\n\t\t\t\t\t// 具体数据\r\n\t\t\t\t\t'data' => [\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t'article_title' => '文章一',\r\n\t\t\t\t\t\t\t'article_content' => '哈哈哈哈哈哈哈',\r\n\t\t\t\t\t\t\t'article_post_date' => '时间戳'\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t'article_title' => '文章一',\r\n\t\t\t\t\t\t\t'article_content' => '哈哈哈哈哈哈哈',\r\n\t\t\t\t\t\t\t'article_post_date' => '时间戳'\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t]\r\n\t\t\t\t]);\r\n\t\t\t}\r\n\t\r\n\t```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}